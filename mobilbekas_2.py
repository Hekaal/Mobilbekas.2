# -*- coding: utf-8 -*-
"""Mobilbekas.2

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1oTJa3uvGuWdgeOvlP-u_IQ4uTozBLftp
"""

#!pip install streamlit
#!pip install catboost

import streamlit as st
import pandas as pd
import numpy as np
import pickle
from catboost import CatBoostRegressor
from PIL import Image

# --- Load Model ---
try:
    with open("catboost_model_quikr.pkl", "rb") as f:
        model = pickle.load(f)
except FileNotFoundError:
    st.error("Error: 'catboost_model_quikr.pkl' not found. Please ensure the model file is in the same directory.")
    st.stop()
except Exception as e:
    st.error(f"An error occurred while loading the model: {e}")
    st.stop()

# --- Load and Preprocess Data for Filtering ---
# This DataFrame is used *only* for populating selectboxes, not for model training.
try:
    # Menggunakan nama file yang lebih sederhana: mobilbekas.csv
    df_filter_data = pd.read_csv("mobilbekas.csv")

    # Basic cleaning for relevant columns to ensure filtering works
    if 'harga' in df_filter_data.columns:
        df_filter_data['harga'] = pd.to_numeric(df_filter_data['harga'], errors='coerce')
    if 'tahun' in df_filter_data.columns:
        df_filter_data['tahun'] = pd.to_numeric(df_filter_data['tahun'], errors='coerce')
    if 'jarak_tempuh' in df_filter_data.columns:
        # Re-using the parse_kms function for consistency
        def parse_kms(km_str):
            if pd.isna(km_str): return np.nan
            km_str = str(km_str).replace(".", "").replace(",", "").strip()
            digits = re.findall(r'\d+', km_str)
            if digits:
                if '-' in km_str:
                    parts = [int(p) for p in digits]
                    return (parts[0] + parts[1]) / 2 if len(parts) >= 2 else int(digits[0])
                return int(digits[0])
            return np.nan
        df_filter_data['jarak_tempuh'] = df_filter_data['jarak_tempuh'].apply(parse_kms)

    # Ensure key filtering columns are strings to avoid type issues in selectbox
    for col in ['merek', 'model', 'tipe_bahan_bakar', 'transmisi', 'warna', 'varian']:
        if col in df_filter_data.columns:
            df_filter_data[col] = df_filter_data[col].astype(str).fillna('Unknown')
        else:
            st.warning(f"Kolom '{col}' tidak ditemukan di dataset untuk filtering.")
            df_filter_data[col] = 'Unknown' # Add if missing to prevent errors

    # Drop rows with NaN in essential filtering columns before generating unique lists
    df_filter_data.dropna(subset=['merek', 'model', 'tipe_bahan_bakar', 'transmisi'], inplace=True)


except FileNotFoundError:
    st.error("Error: 'mobilbekas.csv' not found. This file is needed for dynamic filtering. Please ensure it's in the same directory.")
    st.stop()
except Exception as e:
    st.error(f"An error occurred while loading or processing the dataset for filtering: {e}")
    st.stop()

# --- Konfigurasi Halaman & Judul ---
st.set_page_config(page_title="Prediksi Harga Mobil Bekas", layout="centered", page_icon="ðŸš—")
st.markdown("""
    <style>
    .main {background-color: #f9f9f9;}
    .stButton button {background-color: #007bff; color: white; padding: 0.6em 1.2em; border-radius: 8px;}
    .stButton button:hover {background-color: #0056b3;}
    .stSelectbox, .stNumberInput, .stTextInput, .stSlider {
        background-color: #ffffff;
        border-radius: 10px;
        padding: 1em;
        margin-bottom: 1em; /* Add some space below inputs */
    }
    </style>
""", unsafe_allow_html=True)

st.title("ðŸš— Prediksi Harga Mobil Bekas")
st.markdown("Gunakan aplikasi ini untuk memprediksi harga mobil bekas berdasarkan data kendaraan Anda.")

# --- Tampilkan Metrik Akurasi Model ---
st.subheader("ðŸ“Š Performa Model")
st.info(f"""
    **Akurasi Model Berdasarkan Data Uji:**
    * **MAE (Mean Absolute Error):** Rp 22.263.400
    * **RMSE (Root Mean Squared Error):** Rp 44.287.777
    * **RÂ² (R-squared):** 0.964

    Nilai RÂ² yang tinggi (mendekati 1) menunjukkan bahwa model dapat menjelaskan sebagian besar variasi harga mobil.
""")

# --- Input Pengguna dengan Filter Berurutan ---

# 1. Filter Merek
unique_merek = sorted(df_filter_data['merek'].unique().tolist())
company_input = st.selectbox("Pilih Merek / Brand", unique_merek)

# Filter data berdasarkan merek yang dipilih
filtered_by_merek = df_filter_data[df_filter_data['merek'] == company_input]

# 2. Filter Model berdasarkan Merek
unique_model = sorted(filtered_by_merek['model'].unique().tolist())
if not unique_model: # Handle case where no models found for selected brand
    unique_model = ['Tidak Ada Model Ditemukan']
name_input = st.selectbox("Pilih Model Mobil", unique_model)

# Filter data berdasarkan merek dan model yang dipilih
filtered_by_model = filtered_by_merek[filtered_by_merek['model'] == name_input]

# 3. Filter Tipe Bahan Bakar berdasarkan Merek dan Model
unique_fuel_types = sorted(filtered_by_model['tipe_bahan_bakar'].unique().tolist())
if not unique_fuel_types:
    unique_fuel_types = ['Tidak Ada'] # Default if no data
fuel_type_input = st.selectbox("Pilih Tipe Bahan Bakar", unique_fuel_types)

# 4. Filter Tipe Transmisi berdasarkan Merek dan Model
unique_transmission_types = sorted(filtered_by_model['transmisi'].unique().tolist())
if not unique_transmission_types:
    unique_transmission_types = ['Tidak Ada'] # Default if no data
transmission_type_input = st.selectbox("Pilih Tipe Transmisi", unique_transmission_types)

# Common colors and variants (these are not filtered by other inputs currently)
common_colors = sorted(df_filter_data['warna'].astype(str).unique().tolist())
common_variants = sorted(df_filter_data['varian'].astype(str).unique().tolist())

color_input = st.selectbox("Warna Mobil", common_colors)
variant_input = st.selectbox("Varian Mobil", common_variants)


# Other static inputs
age_input = st.slider("Umur Mobil (tahun)", 0, 30, 5) # Corresponds to 'age'
kms_driven_input = st.number_input("Jarak Tempuh (dalam KM)", min_value=0, step=1000) # Corresponds to 'jarak_tempuh'


# --- Feature Engineering to match the model's training script ---
# These calculations must mirror the training script exactly.

# company_model
company_model_feature = f"{company_input}_{name_input}"

# segment (based on estimated price, as actual price is unknown for prediction)
# Use a heuristic for base_prices if needed, or refine based on actual data
base_prices = {
    'Audi A6': 650_000_000, 'BMW 5 Series': 700_000_000, 'Mercedes C-Class': 750_000_000,
    'Toyota Fortuner': 350_000_000, 'Honda City': 300_000_000, 'Hyundai i20': 250_000_000,
    'Maruti Swift': 120_000_000, 'Tata Nano': 110_000_000, 'Daihatsu Ayla': 130_000_000,
    'Wuling Confero': 150_000_000, 'Hyundai Creta': 320_000_000, 'Suzuki Karimun': 90_000_000,
    'DFSK Glory': 200_000_000, 'Volkswagen Polo': 280_000_000, 'Mazda CX-5': 450_000_000
}
estimated_price = base_prices.get(name_input, 200_000_000) # Default if car not in list
segment_bins = [0, 80e6, 150e6, 300e6, 500e6, 1e9, 3e9]
segment_labels = ['ultra_low', 'low', 'mid_low', 'mid_high', 'high', 'lux']
segment_feature = pd.cut([estimated_price], bins=segment_bins, labels=segment_labels, right=False)[0]


# fuel_age
fuel_age_feature = f"{fuel_type_input}_{age_input}"

# company_segment
company_segment_feature = f"{company_model_feature}_{segment_feature}"

# log_km
log_km_feature = np.log1p(kms_driven_input)

# log_km_per_year
log_km_per_year_feature = np.log1p(kms_driven_input / max(age_input, 1))

# brand_category (based on model name)
lux_names = ['BMW 5 Series', 'Mercedes C-Class', 'Audi A6', 'Land Rover Evoque']
mid_names = ['Toyota Fortuner', 'Honda City', 'Hyundai Creta', 'Volkswagen Polo', 'Mazda CX-5']
budget_names = ['Daihatsu Ayla', 'Suzuki Karimun', 'Wuling Confero', 'Tata Nano', 'Chery QQ', 'DFSK Glory']

if name_input in lux_names:
    brand_category_feature = 'luxury'
elif name_input in mid_names:
    brand_category_feature = 'midrange'
elif name_input in budget_names:
    brand_category_feature = 'budget'
else:
    brand_category_feature = 'general'

# Flags tambahan
is_premium_feature = int(brand_category_feature == 'luxury' and age_input <= 3)
is_high_value_feature = int(brand_category_feature in ['luxury', 'midrange'] and age_input <= 5 and kms_driven_input <= 60000)
is_low_budget_feature = int(brand_category_feature == 'budget' and age_input >= 10 and kms_driven_input >= 120000)

# Negative age feature (for monotonicity if implemented in training)
negative_age_feature = -age_input # Calculate as per previous discussion


# DataFrame input for prediction (ensure column names and order match model training)
features_df = pd.DataFrame([{
    'company_model': company_model_feature,
    'tipe_bahan_bakar': fuel_type_input,
    'log_km': log_km_feature,
    'age': negative_age_feature, # Menggunakan negative_age_feature jika model dilatih dengan ini
    'segment': segment_feature,
    'fuel_age': fuel_age_feature,
    'company_segment': company_segment_feature,
    'log_km_per_year': log_km_per_year_feature,
    'brand_category': brand_category_feature,
    'is_premium': is_premium_feature,
    'is_high_value': is_high_value_feature,
    'is_low_budget': is_low_budget_feature,
    'transmisi': transmission_type_input,
    'warna': color_input,
    'varian': variant_input
}])

# Prediksi harga
if st.button("Prediksi Harga"):
    try:
        pred_log = model.predict(features_df)[0]
        pred_rp = np.expm1(pred_log)
        st.subheader(f"ðŸ’° Estimasi Harga: Rp {pred_rp:,.0f}")
        st.success("Prediksi berhasil!")
    except Exception as e:
        st.error(f"Terjadi kesalahan saat melakukan prediksi: {e}")
        st.info("Pastikan semua input sudah diisi dengan benar dan model sudah dimuat.")

